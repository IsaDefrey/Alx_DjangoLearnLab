"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-omls@c884@irvi_6j0pa@)q7%!r&ul#d%&)h6353j6tm$*!ol!"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

# Prevent browser from MIME-sniffing the response
SECURE_CONTENT_TYPE_NOSNIFF = True

# Enable browser's built-in XSS protection
SECURE_BROWSER_XSS_FILTER = True

# Prevent the site from being framed (clickjacking protection)
X_FRAME_OPTIONS = 'DENY'

# Ensure cookies are only sent over HTTPS
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "bookshelf",  
    "relationship_app",
    "csp",  # Content Security Policy middleware
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "csp.middleware.CSPMiddleware", # CSP Middleware to inject Content Security Policy headers
]

ROOT_URLCONF = "LibraryProject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "LibraryProject.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_USER_MODEL = 'bookshelf.CustomUser'

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

LOGIN_REDIRECT_URL = '/'  # Redirect after login
LOGOUT_REDIRECT_URL = '/login/'  # Redirect after logout

# Optional for serving CSS in dev
STATIC_URL = 'static/'


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ------------------------
# CONTENT SECURITY POLICY
# ------------------------
# Enforces a strict Content Security Policy to mitigate XSS and data injection attacks.
# Compatible with django-csp >= 4.0

CONTENT_SECURITY_POLICY = {
    'DIRECTIVES': {
        'default-src': ("'self'",),
        'script-src': ("'self'",),
        'style-src': ("'self'", 'https://fonts.googleapis.com'),
        'font-src': ("'self'", 'https://fonts.gstatic.com'),
        'img-src': ("'self'", 'data:'),
        'connect-src': ("'self'",),
        # 'report-uri': ('/csp-violation-report/',),  # Optional reporting endpoint
    },
    # Uncomment below to test in report-only mode (logs but doesn’t block)
    # 'REPORT_ONLY': True,
}

# Redirect all HTTP requests to HTTPS
SECURE_SSL_REDIRECT = True  # ⛑️ Enforces HTTPS across the site

# HTTP Strict Transport Security (HSTS)
SECURE_HSTS_SECONDS = 31536000  # ⛑️ Force HTTPS for 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # ⛑️ Apply HSTS to all subdomains
SECURE_HSTS_PRELOAD = True  # ⛑️ Allow your domain to be preloaded in browser HSTS lists

# ⛑️ Ensure session cookies are only sent over HTTPS
SESSION_COOKIE_SECURE = True

# ⛑️ Ensure CSRF protection cookie is only sent over HTTPS
CSRF_COOKIE_SECURE = True


# ⛑️ Prevent clickjacking by denying iframe embedding
X_FRAME_OPTIONS = "DENY"

# ⛑️ Prevent content-type sniffing
SECURE_CONTENT_TYPE_NOSNIFF = True

# ⛑️ Enable XSS filter in modern browsers
SECURE_BROWSER_XSS_FILTER = True

